


Scala : Pure object oriented language & functional programming language.

General purpose programming language.it supports object oriented & funcational programming language.
It does not have a concept called primitive.


where to use scala:
a) kafka streaming
b) parallel processing
c) web application
d) data anylysis with spark.
e) 

scala is compiled to run in JVM.

scala is not extension of java. but while compiling , scala file translate into java byte code and runs in JVM.
 

variable declartion:
====================

var number =100
number = 200

val number:Int = 100


val number = 100  // Constant initialization
    number = 200  //error

=================================================================================================

sample program:
==============

object test{

	var number :Int = 100
  def show(){
	 if(number >=100)
	 	println("number >=100")
	 else
		println("number <100")
 }


// Pattern matching.
 def switch(){
	var number = 1

	number match{

	case 1 =>println("ONE")
	case 2 =>println("TWO")
        case 3 =>println("Three")
        case _ => println("Else")

	}


 }

 def forLoop(){

	//for( a <- 1 to 10 ){  
        // println(a);  // 1,2,3....

	//for( a <- 1 to 10 by 2 ){  
        // println(a);   // 1,3,5...

    for (a <- 1 until 10){
	print(a)
    }   // 1,2,...9
    
	for (a <- 1 until 20 if a%2==0){
	print(a)

    }  //2,4,6...10

 }
 
 def forEach(){
     
     var list = List(1,2,5,3,8,9)
    
    /* list.foreach{
         println
     }
     */
     
    // list.foreach(print)
    
    var strlist = List("first","second","third")
    strlist.foreach((element:String)=>println("element:"+element))
     
     
 }


 def main(arg:Array[String]){
	println("Main")
	//show()
	//switch()
	//forLoop()
	forEach()
 }

}

================================================================================================= 
break statment:
==============

    import scala.util.control.Breaks._                  // Importing  package  
    object MainObject {  
       def main(args: Array[String]) {  
            breakable {                                 // Breakable method to avoid exception  
                for(i<-1 to 10 by 2){  
                    if(i==7)   
                        break                           // Break used here  
                    else  
                        println(i)  
                }  
            }  
        }  
    }  

==================================================================================
Argument with return type:
=========================
import scala.util.control.Breaks._                  // Importing  package  
object test{

def argmethod(a:Int,b:Int)={
    var c = a+b
    c
}


 def main(arg:Array[String]){

	var result = argmethod(1,4)
	print(result)
 }

}

==================================================================================
Anonymous function:
It has no name. but it work as a function.

 def main(arg:Array[String]){
        
      var result = (number1:Int,number2:Int) => number1+number2
      println(result(3,4))
      
      var result2 = (_:Int) + (_:Int)
      println(result2(5,6))      
        
    }

==================================================================================
scala function with variable length.

    def add(args: Int*) = {  
        var sum = 0;  
        for(a <- args) sum+=a  
        sum  
    }  
    var sum = add(1,2,3,4,5,6,7,8,9);  
    println(sum);  


==================================================================================

 we must initialize all instance variable in the class.
 default access specifier : public.
 there must be an object in which main method is defined & it provides starting point to your program.
 
class Student {
    
    var sno:Int = 12
    var name:String = "TEST"
    
}

object MainObject {
    
    def main(arg:Array[String]){
        
        var objStudent = new Student()
        
        println(objStudent.sno)
        println(objStudent.name)
        
    }
}

==================================================================================
with constructor:

class Student (sno:Int,name:String) {
    
    def show(){
        println("SNO:"+sno)
        println("Name:"+name)
        
    }
    
}

object MainObject {
    
    def main(arg:Array[String]){
        
    var sno:Int = 12
    var name:String = "TEST"
        var objStudent = new Student(sno,name)
        
        objStudent.show()
        
    }
    
}

==================================================================================

Scala Singleton Object:
=======================
	is an object which is declared by using keyword object instead class. Need not to use new keyword to initialize object .

Note: No static concepts in scala.


object Singletonmain{
    
    def main(arg:Array[String]){
        
        SingleToneObject.show(12,13)
        
    }
    
}

object SingleToneObject {
    
    	def show(a:Int,b:Int){
        var result = a+b
        println("result:"+result)
        
    }
    
}


==================================================================================

Case Classes : immutable, new keyword is not required to initialize object.

    case class CaseClass(a:Int, b:Int)  
      
    object MainObject{  
        def main(args:Array[String]){  
            var c =  CaseClass(10,10)       // Creating object of case class  
            println("a = "+c.a)               // Accessing elements of case class  
            println("b = "+c.b)  
        }  
    }  

==================================================================================
primary constructor:

class Student (id:Int,name:String){    // Primay construcotor
     
       var department:String = null
       def show(){
           
           println("ID:"+id)
           println("name:"+name)
           println("department:"+department)
           
       }
       
       def this(id:Int,name:String,dep:String){  // Secondary construcotor
           this(id,name)
           department = dep
           
       }
    
    }  
    
    object MainObject {
        
        def main(arg:Array[String]){
            
            var objStudent = new Student(12,"first")
            objStudent.show()
             
            println("After secondary call")
            var objStudent1 = new Student(12,"first","CIVIL")
            objStudent1.show()            
        }                
    }

==========================================================================
Method overriding : override keyword should be used in child method.


class Parent {
    def method(){
        println("Parent method")
    }    
}


class Child extends Parent {
    
    override def method(){
        println("Child method")
    }
}


object MainObject{
    def main(arg:Array[String]){
    
        var objChild = new Child()
        objChild.method()
    }
    
    
}


Note: 
a) field overriding concept also there..  override keyword should be used in child fields.
b) keyword val can be overriden & not var
c) final keyword (val) variable / methods can not be overriden.
d) final class can not be inherited.

============================================================================

Trait (Interface) : Like an interface.  all behaviour same. but trait can have abstract as well as non-abstract methods.
variables : var / val : if not initialized will be considered abstract.

trait mixins:
============
 A class can implement with n number of trait with class / abstract class. Implmentation order should be like this.

  class extends <class> with trait1, trait2....

=================================================================================


Access Modifier:
============== 
 a) no modifier (public)
 b) Proetected
 c) Private

====================================================================================

Array:
======

 object Test1{
    
    def main(arg:Array[String]){
    
    var arr = Array.ofDim[Int](3,3)          // Creating multidimensional array   
    
    // var arr = Array(Array(1,2,3),Array(4,3,3),Array(5,6,3))
    arr = Array(Array(1,2,3),Array(4,3,3),Array(5,6,3))
    
         for(i <- 0 to arr.length-1){
             for(j <- 0 to arr.length-1){
                print(arr(i)(j)+" ")
            }
             println()
         }         
    }       
}
  
--------------------------------------------------------------------------------------------------------

 object MainObject{  
 
            
            var arr = Array(Array(1,2),Array(4,5))
            
            for(a <- 0 to 1)
            for(b <- 0 to 1)
            println(arr(a)(b))                     
              
        }  
    }  
=========================================================================================	
String : both equals or ==  compare strings.

String interpolation: Allows to pass variable with the string without using '+' operator.

var str = 3.12

println(s"value is $str")  -->  value is 3.12  

===========================================================================================
Exception:

 try{
            var s = 12/0
          }
          catch{
              case e:ArithmeticException => println("Exception occured .."+e)              
          }


throws:
class ExceptionExample4{  
    @throws(classOf[NumberFormatException])

===========================================================================================
Collections:
============
a) import Scala.collection.mutable (add/modify/remove)
b) import Scala.collection.immutable (can not modify)

Set : no duplicates

  var varSet:Set[String] = Set("test1","test2","test1","test4")
          //print(varSet)
          
          /**
		for(element <- varSet)
		println(element)
		  
		println(varSet.head)
		println(varSet.tail)
		println(varSet.isEmpty)		  
          **/

        var varSet1:Set[String] = Set("test5","test6","test1","test8")
         
          //var varSet3:Set[String] = varSet ++ varSet1  //Merge
          
          var varSet3:Set[String] = varSet.union(varSet1)  //Merge
          var varSet4:Set[String] = varSet.intersect(varSet1)   // matching (common) elements
          
          println(varSet4)
          println()
          
          varSet3 = varSet3 + "test9"  //Add
          varSet3 = varSet3 - "test8"  //Remove
          
          //println(varSet3)
          
          varSet3.foreach((element:String)=>println(element))
          
          //Sorted Map
`
          
          sortNumbers.foreach((element:Int) => println(element))

==========================================================================================

Seq : same like list. but element can be accessed by passing seq

        var seq:Seq[Int] = Seq(52,85,1,8,3,2,7)  
        println(seq(2))  

==========================================================================================

var hashmap = HashMap("A"->"First","B"->"Second","C"->"Third")
           
           hashmap.foreach{
               case(key,value) => println(key + ":"+value)
               
           }


 var hashmap = HashMap("A"->"First","B"->"Second","C"->"Third")   
     
     hashmap.foreach{
         case(key,value) => println(key + " : "+ value)
         
     }
==========================================================================================

Tuple: like  list but can store any type of data.

        var tupleValues = (1,2.5,"India")  

        tupleValues.productIterator.foreach(println)    // Iterating tuple values using productIterator  
 	println(tupleValues._1) // Fetching first value  
        println(tupleValues._2) // Fetching second value  

==========================================================================================
Scala Function Parameter example with default value
----------------------------------------------------

 def functionExample(a:Int = 0, b:Int = 0):Int = {   // Parameters with default values as 0  
        a+b  
    }  

    
    def main(arg:Array[String]){
	var result1 = functionExample(15,3)   // Calling with 2 value  
        var result2 = functionExample(15)   // Calling with one value  
    }
==========================================================================================
Passing function as paratmeter:
-----------------------------
    object MainObject {  
       def main(args: Array[String]) = {  
         functionExample(25, multiplyBy2)                   // Passing a function as parameter  
        }  
        def functionExample(a:Int, f:Int=>AnyVal):Unit = {  
            println(f(a))                                   // Calling that function   
        }  
        def multiplyBy2(a:Int):Int = {  
            a*2  
        }  
    }  

==========================================================================================
function composition:
--------------------

     var result = multiplyBy2(add2(10))      // Function composition  

======================================================================================

multi line expression:
----------------------
def add1(a:Int, b:Int) = {  
        a  
        +b  
    }

=====================================================================================
Scala Nested Functions Example:
--------------------------------

    object MainObject {  
        def add(a:Int, b:Int, c:Int) = {  
            def add2(x:Int,y:Int) = {  
                x+y  
            }  
            add2(a,add2(b,c))  
        }  
        def main(args: Array[String]) = {  
            var result = add(10,10,10)  
            println(result)  
        }  
    }  

==========================================================================================

String interpolation:
--------------------
new mechanism to create strings from your data. not used + operator in print statement.

 var pi = 3.14  
    def show(){  
        println(s"value of pi = $pi")  
    }  


String Interpolation Example By using f Method
----------------------------------------------
It is like printf function of c language which is used to produce formatted output. %s ref string. %f ref float.


 var s1 = "Scala string example"  
    var version = 2.12  
    def show(){  
        println(f"This is $s1%s, scala version is $version%2.2f")  
    }  
}  


output:This is Scala string example, scala version is 2.12


Scala String Interpolation Example By using raw Method
----------------------------------------------------
 var s1 = "Scala \tstring \nexample"      
    var s2 = raw"Scala \tstring \nexample"    
println(s1)  
        println(s2) 


output:
Scala	string 
example
Scala \nstring \nexample

==========================================================================================
custom exception:

class InvalidAgeException(s:String) extends Exception(s){}  
class ExceptionExample{  
    @throws(classOf[InvalidAgeException])  
    def validate(age:Int){  
        if(age<18){  
            throw new InvalidAgeException("Not eligible")  
        }else{  
            println("You are eligible")  
        }  
    }  
}  


==========================================================================================
Listset : same insertion order.


 
